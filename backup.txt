import React, { useState, useEffect, createContext } from "react";

export const UserContext = createContext();

export const UserProvider = props => {
  const currentUser = JSON.parse(localStorage.getItem("user"))
  const iniateUser = currentUser ? currentUser : null

  const [user, setUser] = useState(iniateUser);

  const loginUser = userData => {
    localStorage.setItem("user", JSON.stringify(userData));
    setUser(userData);
  };

  const logoutUser = () => {
    localStorage.removeItem("user");
    setUser(null);
  };

  const updateUser = updatedUserData => {
    const updatedUser = { ...user, ...updatedUserData };
    localStorage.setItem("user", JSON.stringify(updatedUser));
    setUser(updatedUser);
  };

  useEffect(() => {
    // Check if there's a user in localStorage when the component mounts
    const storedUser = JSON.parse(localStorage.getItem("user"));
    if (storedUser) {
      setUser(storedUser);
    }
  }, []); // Empty dependency array to only run this effect once, when the component mounts

  return (
    <UserContext.Provider value={[ user, loginUser, logoutUser, updateUser, setUser]}>
      {props.children}
    </UserContext.Provider>
  );
};